# app.py
# Interface utilisateur Streamlit pour l'agent d'analyse de contenu YouTube.

import streamlit as st
import pandas as pd
import os
# La biblioth√®que dotenv n'est plus n√©cessaire si on n'utilise plus de cl√©s API
# from dotenv import load_dotenv
from youtube_agent import run_full_analysis, get_video_details

# # Charger les variables d'environnement (plus n√©cessaire)
# load_dotenv()

st.set_page_config(page_title="Agent d'Analyse YouTube", layout="wide")

# Initialisation de l'√©tat de la session
if 'video_df' not in st.session_state:
    st.session_state.video_df = None

st.title("ü§ñ Agent d'Analyse de Contenu YouTube (Version Locale)")
st.markdown("""
Cette application utilise le mod√®le **Whisper auto-h√©berg√©** pour analyser les vid√©os d'une cha√Æne YouTube.
**√âtape 1 :** Listez les vid√©os. **√âtape 2 :** S√©lectionnez les vid√©os et le mod√®le, puis lancez l'analyse.
""")

# --- Panneau de configuration dans la barre lat√©rale ---
with st.sidebar:
    st.header("Configuration de l'Analyse")
    
    st.subheader("√âtape 1 : Lister les vid√©os")
    url_input = st.text_input(
        "URL de la cha√Æne ou d'une vid√©o",
        placeholder="Collez une URL ici..."
    )
    list_videos_button = st.button("Lister la/les vid√©o(s)")

    st.subheader("√âtape 2 : Choisir le mod√®le")
    whisper_model = st.selectbox(
        "Taille du mod√®le Whisper",
        ("tiny", "base", "small", "medium", "large-v2"),
        index=1, # 'base' par d√©faut
        help="Les mod√®les plus grands sont plus pr√©cis mais beaucoup plus lents et gourmands en ressources. 'base' est un bon d√©but."
    )

# --- Logique pour lister les vid√©os ---
if list_videos_button and url_input:
    with st.spinner("R√©cup√©ration des informations..."):
        videos_list = get_video_details(url_input)
        if videos_list:
            df = pd.DataFrame(videos_list)
            df.insert(0, "S√©lectionner", True) # Tout s√©lectionner par d√©faut
            st.session_state.video_df = df
        else:
            st.error("Impossible de r√©cup√©rer les informations. V√©rifiez l'URL.")
            st.session_state.video_df = None

# --- Affichage du s√©lecteur de vid√©os et du panneau d'analyse ---
if st.session_state.video_df is not None:
    st.header("Vid√©os √† analyser")

    edited_df = st.data_editor(
        st.session_state.video_df,
        column_config={
            "S√©lectionner": st.column_config.CheckboxColumn(
                "Votre s√©lection",
                default=True,
            ),
            "title": st.column_config.TextColumn("Titre de la vid√©o"),
            "duration": st.column_config.TextColumn("Dur√©e"),
            "url": st.column_config.LinkColumn("URL", display_text="Lien")
        },
        disabled=["title", "duration", "url"],
        hide_index=True,
        height=400
    )

    selected_videos = edited_df[edited_df.S√©lectionner]

    st.header("Lancer l'analyse locale")
    st.info(f"{len(selected_videos)} vid√©o(s) s√©lectionn√©e(s) avec le mod√®le **{whisper_model}**.")

    keywords_input = st.text_area(
        "Mots-cl√©s √† rechercher (s√©par√©s par des virgules)",
        placeholder="Ex: intelligence artificielle, √©thique, philosophie"
    )

    start_analysis = st.button("Lancer l'Analyse Locale")

    if start_analysis:
        if selected_videos.empty:
            st.warning("Veuillez s√©lectionner au moins une vid√©o √† analyser.")
        elif not keywords_input:
            st.error("Veuillez renseigner les mots-cl√©s.")
        else:
            video_urls_to_analyze = selected_videos['url'].tolist()
            keywords = [keyword.strip() for keyword in keywords_input.split(',')]

            st.info(f"Lancement de l'analyse sur {len(video_urls_to_analyze)} vid√©o(s)...")
            st.warning("Le premier chargement du mod√®le peut √™tre long (plusieurs minutes) car il est t√©l√©charg√©.")
            
            progress_bar = st.progress(0.0)
            status_text = st.empty()

            def update_progress(progress, text):
                progress_bar.progress(progress)
                status_text.text(text)

            try:
                # On passe maintenant le nom du mod√®le au lieu de la cl√© API
                results = run_full_analysis(video_urls_to_analyze, keywords, whisper_model, update_progress)

                st.success("‚úÖ Analyse termin√©e !")
                st.header("üìä Rapport d'Analyse")

                if results:
                    col1, col2 = st.columns(2)
                    col1.metric("Nombre de vid√©os analys√©es", results['total_videos'])
                    col2.metric("Total des occurrences trouv√©es", results['total_occurrences'])

                    st.subheader("D√©tails par mot-cl√©")

                    if results['total_occurrences'] == 0:
                        st.info("Aucune occurrence des mots-cl√©s sp√©cifi√©s n'a √©t√© trouv√©e.")
                    else:
                        for keyword in keywords:
                            hits = results['details'].get(keyword, [])
                            with st.expander(f"'{keyword}' - {len(hits)} vid√©o(s) correspondante(s)"):
                                if hits:
                                    for title, url, count in hits:
                                        st.markdown(f"**{title}**")
                                        st.markdown(f" - **Occurrences :** {count}")
                                        st.markdown(f" - **URL :** [{url}]({url})")
                                else:
                                    st.write("Aucune occurrence trouv√©e pour ce mot-cl√©.")
                else:
                    st.error("L'analyse n'a retourn√© aucun r√©sultat.")

            except Exception as e:
                st.error(f"Une erreur critique est survenue durant l'analyse : {e}")

