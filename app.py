# app.py
# Interface utilisateur Streamlit pour l'agent d'analyse de contenu YouTube.

import streamlit as st
import pandas as pd
import os
from dotenv import load_dotenv
from youtube_agent import run_full_analysis, get_video_details

# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

st.set_page_config(page_title="Agent d'Analyse YouTube", layout="wide")

# Initialisation de l'√©tat de la session
if 'video_df' not in st.session_state:
    st.session_state.video_df = None

st.title("ü§ñ Agent d'Analyse de Contenu YouTube")
st.markdown("""
Cette application analyse les vid√©os s√©lectionn√©es d'une cha√Æne YouTube pour y trouver des mots-cl√©s.
**√âtape 1 :** Listez les vid√©os d'une cha√Æne. **√âtape 2 :** S√©lectionnez les vid√©os √† analyser et lancez l'analyse.
""")

# --- ONGLETS PRINCIPAUX ---
tab1, tab2 = st.tabs(["üìä Analyse compl√®te", "üß™ Test vid√©o unique"])

# === TAB 1: ANALYSE COMPL√àTE ===
with tab1:
    # --- Panneau de configuration dans la barre lat√©rale ---
    with st.sidebar:
        st.header("√âtape 1 : Lister les vid√©os")
        channel_url = st.text_input(
            "URL de la cha√Æne YouTube",
            placeholder="Ex: https://www.youtube.com/@monsieurphi"
        )
        list_videos_button = st.button("Lister les vid√©os de la cha√Æne")

    # --- Logique pour lister les vid√©os ---
    if list_videos_button and channel_url:
        with st.spinner("R√©cup√©ration des informations des vid√©os... Cela peut prendre un moment."):
            videos_list = get_video_details(channel_url)
            if videos_list:
                df = pd.DataFrame(videos_list)
                df.insert(0, "S√©lectionner", False)
                st.session_state.video_df = df
            else:
                st.error("Impossible de r√©cup√©rer les vid√©os. V√©rifiez l'URL de la cha√Æne.")
                st.session_state.video_df = None

    # --- Affichage du s√©lecteur de vid√©os et du panneau d'analyse ---
    if st.session_state.video_df is not None:
        st.header("S√©lectionnez les vid√©os √† analyser")

        edited_df = st.data_editor(
            st.session_state.video_df,
            column_config={
                "S√©lectionner": st.column_config.CheckboxColumn(
                    "Votre s√©lection",
                    default=False,
                ),
                "title": st.column_config.TextColumn("Titre de la vid√©o"),
                "duration": st.column_config.TextColumn("Dur√©e"),
                "url": st.column_config.LinkColumn("URL", display_text="Lien")
            },
            disabled=["title", "duration", "url"],
            hide_index=True,
            height=400
        )

        selected_videos = edited_df[edited_df.S√©lectionner]

        st.header("√âtape 2 : Lancer l'analyse")
        st.info(f"{len(selected_videos)} vid√©o(s) s√©lectionn√©e(s).")

        keywords_input = st.text_area(
            "Mots-cl√©s √† rechercher (s√©par√©s par des virgules)",
            placeholder="Ex: intelligence artificielle, √©thique, philosophie"
        )

        start_analysis = st.button("Lancer l'Analyse sur la s√©lection")

        if start_analysis:
            openai_api_key = os.getenv("OPENAI")

            if selected_videos.empty:
                st.warning("Veuillez s√©lectionner au moins une vid√©o √† analyser.")
            elif not keywords_input or not openai_api_key:
                st.error("Veuillez renseigner les mots-cl√©s. Assurez-vous √©galement que votre variable d'environnement OPENAI est bien configur√©e dans un fichier .env.")
            else:
                video_urls_to_analyze = selected_videos['url'].tolist()
                keywords = [keyword.strip() for keyword in keywords_input.split(',')]

                st.info(f"Lancement de l'analyse sur {len(video_urls_to_analyze)} vid√©o(s)...")
                progress_bar = st.progress(0.0)
                status_text = st.empty()

                def update_progress(progress, text):
                    progress_bar.progress(progress)
                    status_text.text(text)

                try:
                    results = run_full_analysis(video_urls_to_analyze, keywords, openai_api_key, update_progress)

                    st.success("‚úÖ Analyse termin√©e !")
                    st.header("üìä Rapport d'Analyse")

                    if results:
                        col1, col2 = st.columns(2)
                        col1.metric("Nombre de vid√©os analys√©es", results['total_videos'])
                        col2.metric("Total des occurrences trouv√©es", results['total_occurrences'])

                        st.subheader("D√©tails par mot-cl√©")

                        if results['total_occurrences'] == 0:
                            st.info("Aucune occurrence des mots-cl√©s sp√©cifi√©s n'a √©t√© trouv√©e.")
                        else:
                            for keyword in keywords:
                                hits = results['details'].get(keyword, [])
                                with st.expander(f"'{keyword}' - {len(hits)} vid√©o(s) correspondante(s)"):
                                    if hits:
                                        for title, url, count in hits:
                                            st.markdown(f"**{title}**")
                                            st.markdown(f" - **Occurrences :** {count}")
                                            st.markdown(f" - **URL :** [{url}]({url})")
                                    else:
                                        st.write("Aucune occurrence trouv√©e pour ce mot-cl√©.")
                    else:
                        st.error("L'analyse n'a retourn√© aucun r√©sultat.")

                except Exception as e:
                    st.error(f"Une erreur critique est survenue durant l'analyse : {e}")

# === TAB 2: TEST VID√âO UNIQUE ===
with tab2:
    st.header("üß™ Testez avec une vid√©o unique")
    st.markdown("Testez rapidement si l'analyse fonctionne avec une vid√©o en particulier.")

    test_video_url = st.text_input(
        "URL de la vid√©o YouTube",
        placeholder="Ex: https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    )

    test_keywords_input = st.text_area(
        "Mots-cl√©s √† chercher (s√©par√©s par des virgules)",
        placeholder="Ex: test, exemple, mot",
        key="test_keywords"
    )

    if st.button("Lancer le test"):
        openai_api_key = os.getenv("OPENAI")

        if not test_video_url:
            st.warning("Veuillez entrer une URL de vid√©o.")
        elif not test_keywords_input or not openai_api_key:
            st.error("Veuillez renseigner les mots-cl√©s. Assurez-vous √©galement que votre cl√© API OPENAI est configur√©e.")
        else:
            keywords = [keyword.strip() for keyword in test_keywords_input.split(',')]

            st.info(f"Test en cours sur 1 vid√©o avec {len(keywords)} mot(s)-cl√©(s)...")
            progress_bar = st.progress(0.0)
            status_text = st.empty()

            def update_test_progress(progress, text):
                progress_bar.progress(progress)
                status_text.text(text)

            try:
                results = run_full_analysis([test_video_url], keywords, openai_api_key, update_test_progress)

                st.success("‚úÖ Test termin√© !")
                st.header("üìã R√©sultats du test")

                if results and results['total_occurrences'] > 0:
                    st.metric("Occurrences totales trouv√©es", results['total_occurrences'])

                    for keyword in keywords:
                        hits = results['details'].get(keyword, [])
                        if hits:
                            title, url, count = hits[0]
                            st.success(f"**'{keyword}'** trouv√© **{count}** fois")
                            st.markdown(f"Titre : {title}")
                        else:
                            st.warning(f"**'{keyword}'** : 0 occurrence")
                else:
                    st.info("Aucune occurrence des mots-cl√©s n'a √©t√© trouv√©e dans cette vid√©o.")

            except Exception as e:
                st.error(f"Erreur lors du test : {e}")