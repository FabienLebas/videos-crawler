# app.py
# Interface utilisateur Streamlit pour l'agent d'analyse de contenu YouTube.

import streamlit as st
import pandas as pd
import os
import threading
import time
from youtube_agent import (
    run_full_analysis, 
    get_video_details, 
    get_cached_transcription,
    estimate_processing_time,
    format_time,
    get_average_processing_speed,
    TRANSCRIPTIONS_DIR
)
from pathlib import Path
from pytube import YouTube

st.set_page_config(page_title="Agent d'Analyse YouTube", layout="wide")

# Initialisation de l'√©tat de la session
if 'video_df' not in st.session_state:
    st.session_state.video_df = None
if 'analysis_running' not in st.session_state:
    st.session_state.analysis_running = False
if 'stop_analysis' not in st.session_state:
    st.session_state.stop_analysis = False

st.title("ü§ñ Agent d'Analyse de Contenu YouTube (Version Locale)")
st.markdown("""
Cette application utilise le mod√®le **Whisper auto-h√©berg√©** pour analyser les vid√©os d'une cha√Æne YouTube.
**√âtape 1 :** Listez les vid√©os. **√âtape 2 :** S√©lectionnez les vid√©os et le mod√®le, puis lancez l'analyse.
""")

# --- Panneau de configuration dans la barre lat√©rale ---
with st.sidebar:
    st.header("Configuration de l'Analyse")
    
    st.subheader("√âtape 1 : Lister les vid√©os")
    url_input = st.text_input(
        "URL de la cha√Æne ou d'une vid√©o",
        placeholder="Collez une URL ici..."
    )
    list_videos_button = st.button("Lister la/les vid√©o(s)")

    st.subheader("√âtape 2 : Choisir le mod√®le")
    whisper_model = st.selectbox(
        "Taille du mod√®le Whisper",
        ("tiny", "base", "small", "medium", "large-v2"),
        index=1,  # 'base' par d√©faut
        help="Les mod√®les plus grands sont plus pr√©cis mais beaucoup plus lents et gourmands en ressources. 'base' est un bon d√©but."
    )

# --- Logique pour lister les vid√©os ---
if list_videos_button and url_input:
    with st.spinner("R√©cup√©ration des informations..."):
        videos_list = get_video_details(url_input)
        if videos_list:
            df = pd.DataFrame(videos_list)
            df.insert(0, "S√©lectionner", True)
            st.session_state.video_df = df
        else:
            st.error("Impossible de r√©cup√©rer les informations. V√©rifiez l'URL.")
            st.session_state.video_df = None

# --- Fonction pour v√©rifier si une vid√©o est en cache ---
def is_video_cached(url: str) -> bool:
    """V√©rifie si une vid√©o a d√©j√† √©t√© transcrite"""
    return get_cached_transcription(url) is not None

# --- Affichage du s√©lecteur de vid√©os et du panneau d'analyse ---
if st.session_state.video_df is not None:
    st.header("Vid√©os √† analyser")

    # Boutons pour s√©lectionner/d√©s√©lectionner toutes les vid√©os
    col_select_all, col_deselect_all = st.columns(2)
    
    select_all_clicked = False
    deselect_all_clicked = False
    
    with col_select_all:
        if st.button("‚úÖ Tout s√©lectionner", key="select_all"):
            st.session_state.video_df["S√©lectionner"] = True
            select_all_clicked = True
    
    with col_deselect_all:
        if st.button("‚ùå Tout d√©s√©lectionner", key="deselect_all"):
            st.session_state.video_df["S√©lectionner"] = False
            deselect_all_clicked = True

    # Ajouter une colonne indiquant si la vid√©o est en cache
    df_display = st.session_state.video_df.copy()
    df_display["üìÅ Cached"] = df_display["url"].apply(
        lambda url: "‚úÖ Disponible" if is_video_cached(url) else "‚è≥ √Ä t√©l√©charger"
    )
    
    # Ajouter une colonne avec le temps estim√© (sans appels YouTube pour √©viter les timeouts)
    df_display["‚è±Ô∏è Temps estim√©"] = df_display.apply(
        lambda row: "‚úÖ En cache" if "‚úÖ" in row["üìÅ Cached"] else "N/A",
        axis=1
    )
    
    # Trier pour que les vid√©os en cache apparaissent en premier
    df_display = df_display.sort_values(
        "üìÅ Cached",
        key=lambda x: x.apply(lambda v: 0 if "‚úÖ" in str(v) else 1)
    ).reset_index(drop=True)

    edited_df = st.data_editor(
        df_display,
        column_config={
            "S√©lectionner": st.column_config.CheckboxColumn(
                "Votre s√©lection",
                default=True,
            ),
            "title": st.column_config.TextColumn("Titre de la vid√©o"),
            "duration": st.column_config.TextColumn("Dur√©e"),
            "url": st.column_config.LinkColumn("URL", display_text="Lien"),
            "üìÅ Cached": st.column_config.TextColumn("√âtat du cache"),
            "‚è±Ô∏è Temps estim√©": st.column_config.TextColumn("Temps estim√©")
        },
        disabled=["title", "duration", "url", "üìÅ Cached", "‚è±Ô∏è Temps estim√©"],
        hide_index=True,
        height=400,
        key="video_selector"
    )

    selected_videos = edited_df[edited_df["S√©lectionner"]]

    st.header("Lancer l'analyse locale")
    st.info(f"{len(selected_videos)} vid√©o(s) s√©lectionn√©e(s) avec le mod√®le **{whisper_model}**.")
    
    # Afficher les estimations de temps (avec mise en cache)
    if len(selected_videos) > 0:
        avg_speed = get_average_processing_speed(whisper_model)
        
        # Calculer le temps estim√© pour chaque vid√©o
        estimated_times = []
        total_estimated_time = 0
        
        for idx, row in selected_videos.iterrows():
            url = row['url']
            title = row['title']
            # V√©rifier d'abord si en cache
            if is_video_cached(url):
                estimated_time = 0
                estimated_times.append((title, 0))
            else:
                # Pour les vid√©os non cach√©es, on utilise une estimation simple
                # On calcule le temps estim√© quand on lance l'analyse
                estimated_times.append((title, None))
            
        if estimated_times:
            videos_to_process = sum(1 for _, t in estimated_times if t is None)
            if avg_speed and videos_to_process > 0:
                st.info(f"üìä **Vitesse moyenne** : {avg_speed:.2f}x (bas√©e sur vid√©os pr√©c√©dentes)")
            
            with st.expander(f"üìã D√©tails des {len(estimated_times)} vid√©o(s) s√©lectionn√©e(s)"):
                for title, est_time in estimated_times:
                    if est_time == 0:
                        st.write(f"‚úÖ {title[:60]} - En cache")
                    elif est_time is None:
                        st.write(f"‚è≥ {title[:60]} - √Ä traiter")
                    else:
                        st.write(f"‚è±Ô∏è {title[:60]} - {format_time(est_time)}")

    keywords_input = st.text_area(
        "Mots-cl√©s √† rechercher (s√©par√©s par des virgules)",
        placeholder="Ex: intelligence artificielle, √©thique, philosophie"
    )

    # Cr√©er deux colonnes pour les boutons
    col1, col2 = st.columns([4, 1])
    
    with col1:
        start_analysis = st.button("üöÄ Lancer l'Analyse Locale", key="start_btn")
    
    with col2:
        stop_analysis = st.button("‚èπÔ∏è Arr√™ter", key="stop_btn")
    
    if stop_analysis:
        st.session_state.stop_analysis = True

    if start_analysis:
        if selected_videos.empty:
            st.warning("Veuillez s√©lectionner au moins une vid√©o √† analyser.")
        elif not keywords_input:
            st.error("Veuillez renseigner les mots-cl√©s.")
        else:
            video_urls_to_analyze = selected_videos['url'].tolist()
            keywords = [keyword.strip() for keyword in keywords_input.split(',')]

            st.session_state.analysis_running = True
            st.session_state.stop_analysis = False

            st.info(f"Lancement de l'analyse sur {len(video_urls_to_analyze)} vid√©o(s)...")
            
            # Conteneurs pour les mises √† jour en temps r√©el
            progress_container = st.container()
            status_container = st.container()
            time_container = st.container()
            results_container = st.container()

            progress_bar = progress_container.progress(0.0)
            status_text = status_container.empty()
            time_text = time_container.empty()
            current_progress = [0.0]  # Utiliser une liste pour modifier dans la closure
            analysis_start_time = [time.time()]  # Temps de d√©marrage
            videos_completed = [0]  # Nombre de vid√©os compl√©t√©es

            def update_progress(text):
                if st.session_state.stop_analysis:
                    return False  # Signaler l'arr√™t
                status_text.markdown(f"**{text}**")
                # Incr√©menter l√©g√®rement la progression √† chaque appel
                current_progress[0] = min(current_progress[0] + 0.01, 0.99)
                progress_bar.progress(current_progress[0])
                
                # D√©terminer si une vid√©o a √©t√© compl√©t√©e (texte contient "‚úÖ")
                if "‚úÖ" in text and "compl√©t√©e" in text:
                    videos_completed[0] += 1
                
                # Calculer le temps √©coul√© et le temps restant estim√©
                elapsed_time = time.time() - analysis_start_time[0]
                if videos_completed[0] > 0 and len(video_urls_to_analyze) > 0:
                    time_per_video = elapsed_time / videos_completed[0]
                    remaining_videos = len(video_urls_to_analyze) - videos_completed[0]
                    remaining_time = time_per_video * remaining_videos
                    time_text.info(f"‚è±Ô∏è Temps √©coul√© : {format_time(elapsed_time)} | Temps restant estim√© : {format_time(remaining_time)}")
                
                return True  # Continuer

            try:
                results = run_full_analysis(
                    video_urls_to_analyze, 
                    keywords, 
                    whisper_model, 
                    update_progress,
                    st.session_state.stop_analysis
                )

                if st.session_state.stop_analysis:
                    st.warning("‚èπÔ∏è Analyse interrompue par l'utilisateur.")
                else:
                    progress_bar.progress(1.0)
                    status_text.success("‚úÖ Analyse termin√©e !")
                    
                    st.header("üìä Rapport d'Analyse")

                    if results:
                        col1, col2 = st.columns(2)
                        col1.metric("Nombre de vid√©os analys√©es", results['total_videos'])
                        col2.metric("Total des occurrences trouv√©es", results['total_occurrences'])

                        st.subheader("D√©tails par mot-cl√©")

                        if results['total_occurrences'] == 0:
                            st.info("Aucune occurrence des mots-cl√©s sp√©cifi√©s n'a √©t√© trouv√©e.")
                        else:
                            for keyword in keywords:
                                hits = results['details'].get(keyword, [])
                                with st.expander(f"'{keyword}' - {len(hits)} vid√©o(s) correspondante(s)"):
                                    if hits:
                                        for title, url, count in hits:
                                            st.markdown(f"**{title}**")
                                            st.markdown(f" - **Occurrences :** {count}")
                                            st.markdown(f" - **URL :** [{url}]({url})")
                                    else:
                                        st.write("Aucune occurrence trouv√©e pour ce mot-cl√©.")
                    else:
                        st.error("L'analyse n'a retourn√© aucun r√©sultat.")

            except Exception as e:
                st.error(f"Une erreur critique est survenue durant l'analyse : {e}")
            
            finally:
                st.session_state.analysis_running = False
                st.session_state.stop_analysis = False